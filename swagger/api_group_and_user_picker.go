
/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type GroupAndUserPickerApiService service
/*
GroupAndUserPickerApiService Find users and groups
Returns a list of users and groups matching a string. The string is used:   *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.  *  for groups, to find a case-sensitive match with group name.  For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.  Optionally, the search can be refined to:   *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:           *  projects.      *  issue types.          If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.  *  not return Connect app users and groups.  *  return groups that have a case-insensitive match with the query.  The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an &#x60;html&#x60; field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The search string.
 * @param optional nil or *GroupAndUserPickerApiFindUsersAndGroupsOpts - Optional Parameters:
     * @param "MaxResults" (optional.Int32) -  The maximum number of items to return in each list.
     * @param "ShowAvatar" (optional.Bool) -  Whether the user avatar should be returned. If an invalid value is provided, the default value is used.
     * @param "FieldId" (optional.String) -  The custom field ID of the field this request is for.
     * @param "ProjectId" (optional.Interface of []string) -  The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. This parameter is only used when &#x60;fieldId&#x60; is present.
     * @param "IssueTypeId" (optional.Interface of []string) -  The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, &#x60;issueTypeId&#x3D;10000&amp;issueTypeId&#x3D;10001&#x60;. Special values, such as &#x60;-1&#x60; (all standard issue types) and &#x60;-2&#x60; (all subtask issue types), are supported. This parameter is only used when &#x60;fieldId&#x60; is present.
     * @param "AvatarSize" (optional.String) -  The size of the avatar to return. If an invalid value is provided, the default value is used.
     * @param "CaseInsensitive" (optional.Bool) -  Whether the search for groups should be case insensitive.
     * @param "ExcludeConnectAddons" (optional.Bool) -  Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
@return FoundUsersAndGroups
*/

type GroupAndUserPickerApiFindUsersAndGroupsOpts struct {
    MaxResults optional.Int32
    ShowAvatar optional.Bool
    FieldId optional.String
    ProjectId optional.Interface
    IssueTypeId optional.Interface
    AvatarSize optional.String
    CaseInsensitive optional.Bool
    ExcludeConnectAddons optional.Bool
}

func (a *GroupAndUserPickerApiService) FindUsersAndGroups(ctx context.Context, query string, localVarOptionals *GroupAndUserPickerApiFindUsersAndGroupsOpts) (FoundUsersAndGroups, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue FoundUsersAndGroups
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/rest/api/3/groupuserpicker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.MaxResults.IsSet() {
		localVarQueryParams.Add("maxResults", parameterToString(localVarOptionals.MaxResults.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowAvatar.IsSet() {
		localVarQueryParams.Add("showAvatar", parameterToString(localVarOptionals.ShowAvatar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FieldId.IsSet() {
		localVarQueryParams.Add("fieldId", parameterToString(localVarOptionals.FieldId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectId.IsSet() {
		localVarQueryParams.Add("projectId", parameterToString(localVarOptionals.ProjectId.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IssueTypeId.IsSet() {
		localVarQueryParams.Add("issueTypeId", parameterToString(localVarOptionals.IssueTypeId.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.AvatarSize.IsSet() {
		localVarQueryParams.Add("avatarSize", parameterToString(localVarOptionals.AvatarSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CaseInsensitive.IsSet() {
		localVarQueryParams.Add("caseInsensitive", parameterToString(localVarOptionals.CaseInsensitive.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeConnectAddons.IsSet() {
		localVarQueryParams.Add("excludeConnectAddons", parameterToString(localVarOptionals.ExcludeConnectAddons.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v FoundUsersAndGroups
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
